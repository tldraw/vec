{"mappings":"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","sources":["parcel/src/index.ts"],"sourcesContent":["export class Vec {\n  /**\n   * Clamp a value into a range.\n   * @param n\n   * @param min\n   */\n  static clamp(n: number, min: number): number\n  static clamp(n: number, min: number, max: number): number\n  static clamp(n: number, min: number, max?: number): number {\n    return Math.max(min, typeof max !== 'undefined' ? Math.min(n, max) : n)\n  }\n\n  /**\n   * Clamp a value into a range.\n   * @param n\n   * @param min\n   */\n  static clampV(A: number[], min: number): number[]\n  static clampV(A: number[], min: number, max: number): number[]\n  static clampV(A: number[], min: number, max?: number): number[] {\n    return A.map((n) => (max ? Vec.clamp(n, min, max) : Vec.clamp(n, min)))\n  }\n\n  /**\n   * Negate a vector.\n   * @param A\n   */\n  static neg = (A: number[]): number[] => {\n    return [-A[0], -A[1]]\n  }\n\n  /**\n   * Add vectors.\n   * @param A\n   * @param B\n   */\n  static add = (A: number[], B: number[]): number[] => {\n    return [A[0] + B[0], A[1] + B[1]]\n  }\n\n  /**\n   * Add scalar to vector.\n   * @param A\n   * @param B\n   */\n  static addScalar = (A: number[], n: number): number[] => {\n    return [A[0] + n, A[1] + n]\n  }\n\n  /**\n   * Subtract vectors.\n   * @param A\n   * @param B\n   */\n  static sub = (A: number[], B: number[]): number[] => {\n    return [A[0] - B[0], A[1] - B[1]]\n  }\n\n  /**\n   * Subtract scalar from vector.\n   * @param A\n   * @param B\n   */\n  static subScalar = (A: number[], n: number): number[] => {\n    return [A[0] - n, A[1] - n]\n  }\n\n  /**\n   * Get the vector from vectors A to B.\n   * @param A\n   * @param B\n   */\n  static vec = (A: number[], B: number[]): number[] => {\n    // A, B as vectors get the vector from A to B\n    return [B[0] - A[0], B[1] - A[1]]\n  }\n\n  /**\n   * Vector multiplication by scalar\n   * @param A\n   * @param n\n   */\n  static mul = (A: number[], n: number): number[] => {\n    return [A[0] * n, A[1] * n]\n  }\n\n  /**\n   * Multiple two vectors.\n   * @param A\n   * @param B\n   */\n  static mulV = (A: number[], B: number[]): number[] => {\n    return [A[0] * B[0], A[1] * B[1]]\n  }\n\n  /**\n   * Vector division by scalar.\n   * @param A\n   * @param n\n   */\n  static div = (A: number[], n: number): number[] => {\n    return [A[0] / n, A[1] / n]\n  }\n\n  /**\n   * Vector division by vector.\n   * @param A\n   * @param n\n   */\n  static divV = (A: number[], B: number[]): number[] => {\n    return [A[0] / B[0], A[1] / B[1]]\n  }\n\n  /**\n   * Perpendicular rotation of a vector A\n   * @param A\n   */\n  static per = (A: number[]): number[] => {\n    return [A[1], -A[0]]\n  }\n\n  /**\n   * Dot product\n   * @param A\n   * @param B\n   */\n  static dpr = (A: number[], B: number[]): number => {\n    return A[0] * B[0] + A[1] * B[1]\n  }\n\n  /**\n   * Cross product (outer product) | A X B |\n   * @param A\n   * @param B\n   */\n  static cpr = (A: number[], B: number[]): number => {\n    return A[0] * B[1] - B[0] * A[1]\n  }\n\n  /**\n   * Cross (for point in polygon)\n   *\n   */\n  static cross(x: number[], y: number[], z: number[]): number {\n    return (y[0] - x[0]) * (z[1] - x[1]) - (z[0] - x[0]) * (y[1] - x[1])\n  }\n\n  /**\n   * Length of the vector squared\n   * @param A\n   */\n  static len2 = (A: number[]): number => {\n    return A[0] * A[0] + A[1] * A[1]\n  }\n\n  /**\n   * Length of the vector\n   * @param A\n   */\n  static len = (A: number[]): number => {\n    return Math.hypot(A[0], A[1])\n  }\n\n  /**\n   * Project A over B\n   * @param A\n   * @param B\n   */\n  static pry = (A: number[], B: number[]): number => {\n    return Vec.dpr(A, B) / Vec.len(B)\n  }\n\n  /**\n   * Get normalized / unit vector.\n   * @param A\n   */\n  static uni = (A: number[]): number[] => {\n    return Vec.div(A, Vec.len(A))\n  }\n\n  /**\n   * Get normalized / unit vector.\n   * @param A\n   */\n  static normalize = (A: number[]): number[] => {\n    return Vec.uni(A)\n  }\n\n  /**\n   * Get the tangent between two vectors.\n   * @param A\n   * @param B\n   * @returns\n   */\n  static tangent = (A: number[], B: number[]): number[] => {\n    return Vec.uni(Vec.sub(A, B))\n  }\n\n  /**\n   * Dist length from A to B squared.\n   * @param A\n   * @param B\n   */\n  static dist2 = (A: number[], B: number[]): number => {\n    return Vec.len2(Vec.sub(A, B))\n  }\n\n  /**\n   * Dist length from A to B\n   * @param A\n   * @param B\n   */\n  static dist = (A: number[], B: number[]): number => {\n    return Math.hypot(A[1] - B[1], A[0] - B[0])\n  }\n\n  /**\n   * A faster, though less accurate method for testing distances. Maybe faster?\n   * @param A\n   * @param B\n   * @returns\n   */\n  static fastDist = (A: number[], B: number[]): number[] => {\n    const V = [B[0] - A[0], B[1] - A[1]]\n    const aV = [Math.abs(V[0]), Math.abs(V[1])]\n    let r = 1 / Math.max(aV[0], aV[1])\n    r = r * (1.29289 - (aV[0] + aV[1]) * r * 0.29289)\n    return [V[0] * r, V[1] * r]\n  }\n\n  /**\n   * Angle between vector A and vector B in radians\n   * @param A\n   * @param B\n   */\n  static ang = (A: number[], B: number[]): number => {\n    return Math.atan2(Vec.cpr(A, B), Vec.dpr(A, B))\n  }\n\n  /**\n   * Angle between vector A and vector B in radians\n   * @param A\n   * @param B\n   */\n  static angle = (A: number[], B: number[]): number => {\n    return Math.atan2(B[1] - A[1], B[0] - A[0])\n  }\n\n  /**\n   * Mean between two vectors or mid vector between two vectors\n   * @param A\n   * @param B\n   */\n  static med = (A: number[], B: number[]): number[] => {\n    return Vec.mul(Vec.add(A, B), 0.5)\n  }\n\n  /**\n   * Vector rotation by r (radians)\n   * @param A\n   * @param r rotation in radians\n   */\n  static rot = (A: number[], r = 0): number[] => {\n    return [A[0] * Math.cos(r) - A[1] * Math.sin(r), A[0] * Math.sin(r) + A[1] * Math.cos(r)]\n  }\n\n  /**\n   * Rotate a vector around another vector by r (radians)\n   * @param A vector\n   * @param C center\n   * @param r rotation in radians\n   */\n  static rotWith = (A: number[], C: number[], r = 0): number[] => {\n    if (r === 0) return A\n\n    const s = Math.sin(r)\n    const c = Math.cos(r)\n\n    const px = A[0] - C[0]\n    const py = A[1] - C[1]\n\n    const nx = px * c - py * s\n    const ny = px * s + py * c\n\n    return [nx + C[0], ny + C[1]]\n  }\n\n  /**\n   * Check of two vectors are identical.\n   * @param A\n   * @param B\n   */\n  static isEqual = (A: number[], B: number[]): boolean => {\n    return A[0] === B[0] && A[1] === B[1]\n  }\n\n  /**\n   * Interpolate vector A to B with a scalar t\n   * @param A\n   * @param B\n   * @param t scalar\n   */\n  static lrp = (A: number[], B: number[], t: number): number[] => {\n    return Vec.add(A, Vec.mul(Vec.sub(B, A), t))\n  }\n\n  /**\n   * Interpolate from A to B when curVAL goes fromVAL: number[] => to\n   * @param A\n   * @param B\n   * @param from Starting value\n   * @param to Ending value\n   * @param s Strength\n   */\n  static int = (A: number[], B: number[], from: number, to: number, s = 1): number[] => {\n    const t = (Vec.clamp(from, to) - from) / (to - from)\n    return Vec.add(Vec.mul(A, 1 - t), Vec.mul(B, s))\n  }\n\n  /**\n   * Get the angle between the three vectors A, B, and C.\n   * @param p1\n   * @param pc\n   * @param p2\n   */\n  static ang3 = (p1: number[], pc: number[], p2: number[]): number => {\n    // this,\n    const v1 = Vec.vec(pc, p1)\n    const v2 = Vec.vec(pc, p2)\n    return Vec.ang(v1, v2)\n  }\n\n  /**\n   * Absolute value of a vector.\n   * @param A\n   * @returns\n   */\n  static abs = (A: number[]): number[] => {\n    return [Math.abs(A[0]), Math.abs(A[1])]\n  }\n\n  static rescale = (a: number[], n: number): number[] => {\n    const l = Vec.len(a)\n    return [(n * a[0]) / l, (n * a[1]) / l]\n  }\n\n  /**\n   * Get whether p1 is left of p2, relative to pc.\n   * @param p1\n   * @param pc\n   * @param p2\n   */\n  static isLeft = (p1: number[], pc: number[], p2: number[]): number => {\n    //  isLeft: >0 for counterclockwise\n    //          =0 for none (degenerate)\n    //          <0 for clockwise\n    return (pc[0] - p1[0]) * (p2[1] - p1[1]) - (p2[0] - p1[0]) * (pc[1] - p1[1])\n  }\n\n  static clockwise = (p1: number[], pc: number[], p2: number[]): boolean => {\n    return Vec.isLeft(p1, pc, p2) > 0\n  }\n\n  static round = (a: number[], d = 2): number[] => {\n    return a.map((v) => +v.toFixed(d))\n  }\n\n  /**\n   * Get the minimum distance from a point P to a line with a segment AB.\n   * @param A The start of the line.\n   * @param B The end of the line.\n   * @param P A point.\n   * @returns\n   */\n  // static distanceToLine(A: number[], B: number[], P: number[]) {\n  //   const delta = sub(B, A)\n  //   const angle = Math.atan2(delta[1], delta[0])\n  //   const dir = rot(sub(P, A), -angle)\n  //   return dir[1]\n  // }\n\n  /**\n   * Get the nearest point on a line segment AB.\n   * @param A The start of the line.\n   * @param B The end of the line.\n   * @param P A point.\n   * @param clamp Whether to clamp the resulting point to the segment.\n   * @returns\n   */\n  // static nearestPointOnLine(\n  //   A: number[],\n  //   B: number[],\n  //   P: number[],\n  //   clamp = true\n  // ) {\n  //   const delta = sub(B, A)\n  //   const length = len(delta)\n  //   const angle = Math.atan2(delta[1], delta[0])\n  //   const dir = rot(sub(P, A), -angle)\n\n  //   if (clamp) {\n  //     if (dir[0] < 0) return A\n  //     if (dir[0] > length) return B\n  //   }\n\n  //   return add(A, div(mul(delta, dir[0]), length))\n  // }\n\n  /**\n   * Get the nearest point on a line with a known unit vector that passes through point A\n   * @param A Any point on the line\n   * @param u The unit vector for the line.\n   * @param P A point not on the line to test.\n   * @returns\n   */\n  static nearestPointOnLineThroughPoint = (A: number[], u: number[], P: number[]): number[] => {\n    return Vec.add(A, Vec.mul(u, Vec.pry(Vec.sub(P, A), u)))\n  }\n\n  /**\n   * Distance between a point and a line with a known unit vector that passes through a point.\n   * @param A Any point on the line\n   * @param u The unit vector for the line.\n   * @param P A point not on the line to test.\n   * @returns\n   */\n  static distanceToLineThroughPoint = (A: number[], u: number[], P: number[]): number => {\n    return Vec.dist(P, Vec.nearestPointOnLineThroughPoint(A, u, P))\n  }\n\n  /**\n   * Get the nearest point on a line segment between A and B\n   * @param A The start of the line segment\n   * @param B The end of the line segment\n   * @param P The off-line point\n   * @param clamp Whether to clamp the point between A and B.\n   * @returns\n   */\n  static nearestPointOnLineSegment = (\n    A: number[],\n    B: number[],\n    P: number[],\n    clamp = true\n  ): number[] => {\n    const u = Vec.uni(Vec.sub(B, A))\n    const C = Vec.add(A, Vec.mul(u, Vec.pry(Vec.sub(P, A), u)))\n\n    if (clamp) {\n      if (C[0] < Math.min(A[0], B[0])) return A[0] < B[0] ? A : B\n      if (C[0] > Math.max(A[0], B[0])) return A[0] > B[0] ? A : B\n      if (C[1] < Math.min(A[1], B[1])) return A[1] < B[1] ? A : B\n      if (C[1] > Math.max(A[1], B[1])) return A[1] > B[1] ? A : B\n    }\n\n    return C\n  }\n\n  /**\n   * Distance between a point and the nearest point on a line segment between A and B\n   * @param A The start of the line segment\n   * @param B The end of the line segment\n   * @param P The off-line point\n   * @param clamp Whether to clamp the point between A and B.\n   * @returns\n   */\n  static distanceToLineSegment = (A: number[], B: number[], P: number[], clamp = true): number => {\n    return Vec.dist(P, Vec.nearestPointOnLineSegment(A, B, P, clamp))\n  }\n\n  /**\n   * Push a point A towards point B by a given distance.\n   * @param A\n   * @param B\n   * @param d\n   * @returns\n   */\n  static nudge = (A: number[], B: number[], d: number): number[] => {\n    return Vec.add(A, Vec.mul(Vec.uni(Vec.sub(B, A)), d))\n  }\n\n  /**\n   * Push a point in a given angle by a given distance.\n   * @param A\n   * @param B\n   * @param d\n   */\n  static nudgeAtAngle = (A: number[], a: number, d: number): number[] => {\n    return [Math.cos(a) * d + A[0], Math.sin(a) * d + A[1]]\n  }\n\n  /**\n   * Round a vector to a precision length.\n   * @param a\n   * @param n\n   */\n  static toPrecision = (a: number[], n = 4): number[] => {\n    return [+a[0].toPrecision(n), +a[1].toPrecision(n)]\n  }\n\n  /**\n   * Get an array of points (with simulated pressure) between two points.\n   * @param A The first point.\n   * @param B The second point.\n   * @param steps The number of points to return.\n   * @param ease An easing function to apply to the simulated pressure.\n   */\n  static pointsBetween = (A: number[], B: number[], steps = 6): number[][] => {\n    return Array.from(Array(steps)).map((_, i) => {\n      const t = i / (steps - 1)\n      const k = Math.min(1, 0.5 + Math.abs(0.5 - t))\n      return [...Vec.lrp(A, B, t), k]\n    })\n  }\n}\n\nexport default Vec\n"],"names":[],"version":3,"file":"module.js.map"}